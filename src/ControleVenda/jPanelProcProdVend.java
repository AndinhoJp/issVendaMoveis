/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ControleVenda;

import ControlaProduto.ControlaProduto;
import ControleVenda.Controladoras.ControlaProdVenda;
import ControleVenda.Controladoras.ControlaVenda;
import Entity.Funcionario;
import Entity.ProdVenda;
import Entity.Produto;
import Entity.Vendas;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import static sun.io.Win32ErrorMode.initialize;

/**
 *
 * @author ander
 */
public class jPanelProcProdVend extends javax.swing.JPanel {

    /**
     * Creates new form jPanelProcProdVend
     */
    float valorTotal = 0;
    ArrayList<ProdVenda> prodsVenda;
    ArrayList<Produto> produtos;
    DefaultTableModel tableModel;
    String idVenda;
    Produto produto;
    Funcionario funcionario;

    public jPanelProcProdVend(Vendas vendas, Funcionario f) {
        idVenda = vendas.getVendaId();
        funcionario = f;
        initComponents();
    }
    


    public jPanelProcProdVend(Funcionario funcionario, String idVenda) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProdutos = new javax.swing.JTable();
        jButtonAdicionar = new javax.swing.JButton();
        jLabelNomeProduto = new javax.swing.JLabel();
        jTextFieldNomeProduto = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Produtos a adicionar ao carrinho");

        jTableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID:", "Nome:", "Descrição:", "Preço:", "Estoque:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableProdutos);

        jButtonAdicionar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButtonAdicionar.setText("Adicionar");
        jButtonAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdicionarActionPerformed(evt);
            }
        });

        jLabelNomeProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabelNomeProduto.setText("Nome do produto:");

        jTextFieldNomeProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNomeProdutoKeyPressed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelNomeProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNomeProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAdicionar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomeProduto)
                    .addComponent(jTextFieldNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jButtonAdicionar)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        pesquisa();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextFieldNomeProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNomeProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            pesquisa();
        }
    }//GEN-LAST:event_jTextFieldNomeProdutoKeyPressed

    private void jButtonAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdicionarActionPerformed
        Date date = new Date();
        Date data = new Date();
        ControlaVenda controlaVenda = new ControlaVenda();
        if (idVenda == null) {
            int n = JOptionPane.showConfirmDialog(
                    null,
                    "Não há nenhuma venda em andamento, gostaria de iniciar?",
                    "Confirmar Opção",
                    JOptionPane.YES_NO_OPTION);
            JPanel jPanelCarrinhoDeCompras;
            if (n == JOptionPane.YES_OPTION) {
                idVenda = funcionario.getIdFunc() + data.getTime();
                controlaVenda.novaVendaAberta(idVenda, funcionario);
                addProdutoCarrinho();

            }

        } else {
            int n = JOptionPane.showConfirmDialog(
                    null,
                    "Há uma venda em andamento. Começar nova venda?",
                    "Confirmar Opção",
                    JOptionPane.YES_NO_OPTION);
            JPanel jPanelCarrinhoDeCompras;
            if (n == JOptionPane.YES_OPTION) {
                controlaVenda.excluiVendaAberta(funcionario);
                idVenda = funcionario.getIdFunc() + data.getTime();
                controlaVenda.novaVendaAberta(idVenda, funcionario);
                addProdutoCarrinho();

            } else {
                addProdutoCarrinho();

            }
        }

    }//GEN-LAST:event_jButtonAdicionarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAdicionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelNomeProduto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableProdutos;
    private javax.swing.JTextField jTextFieldNomeProduto;
    // End of variables declaration//GEN-END:variables

    void pesquisa() {
        if (jTextFieldNomeProduto.getText().equals(" ")) {
            JOptionPane.showMessageDialog(null, "Digite um nome para realizar a pesquisa.");
        } else {
            tableModel = (DefaultTableModel) jTableProdutos.getModel();
            tableModel.setNumRows(0);
            produtos = new ControlaProduto().getListaProdutos();
            for (Produto p : produtos) {
                if (p.getNomeProd().contains(jTextFieldNomeProduto.getText())) {
                    tableModel.addRow(new Object[]{p.getProdId(), p.getNomeProd(), p.getDescricao(), p.getPrecoVenda(), p.getQuantidadeEstoque()});
                }
            }
        }
    }
    
    

    void addProdutoCarrinho(){
        int quant = 0;
        int indiceProd = jTableProdutos.getSelectedRow();
        if (indiceProd == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um produto para ser adicionado.");
        } else {
        produto = produtos.get(indiceProd);
        }
        if(produto.getQuantidadeEstoque() == 0){
            JOptionPane.showMessageDialog(null, "Produto fora do estoque!");
            return;
        }
        
        while(quant <= 0 || quant > produto.getQuantidadeEstoque()){
            quant = popup();
        }
        
        
        if(quant > 0 || quant < produto.getQuantidadeEstoque()){
            ControlaProdVenda controlaProdVenda = new ControlaProdVenda();
            controlaProdVenda.novoProdVenda(idVenda + new Date().getTime(), produto, new ControlaVenda().getVendaAbertaFuncionario(funcionario), quant, produto.getPrecoVenda());
            produto.setQuantidadeEstoque(produto.getQuantidadeEstoque() - quant);
            new ControlaProduto().atualizaProduto(produto);
        } else{
            return;
        }
        
    }
    
    int popup() {
        JFrame frame = new JFrame("QuantidadeItens");
        String name = JOptionPane.showInputDialog(frame, "Quantidade de itens desejado:");
        int quantidade = Integer.parseInt(name);
   
        return quantidade;
    }

}
